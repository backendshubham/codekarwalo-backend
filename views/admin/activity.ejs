<%- contentFor('body') %>

<div class="container-fluid py-4">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Activity Log</h2>
    <div class="w-50">
      <input type="text" class="form-control" id="searchInput" placeholder="Search activities...">
    </div>
  </div>

  <div class="row" id="activityList">
    <!-- Activity cards will be rendered here -->
  </div>

  <!-- Load More Button -->
  <div class="text-center mt-4" id="loadMoreContainer" style="display: none;">
    <button class="btn btn-primary" id="loadMoreBtn">
      <i class="fas fa-spinner fa-spin me-2" style="display: none;"></i>
      Load More
    </button>
  </div>
</div>

<style>
  .activity-card {
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.04);
    margin-bottom: 1.5rem;
    transition: box-shadow 0.2s;
    height: 100%;
  }
  .activity-card:hover {
    box-shadow: 0 4px 16px rgba(37,99,235,0.08);
    border-color: #2563eb;
  }
  .activity-icon {
    font-size: 1.5rem;
    margin-right: 1rem;
  }
  .activity-meta {
    font-size: 0.95rem;
    color: #6c757d;
  }
  .bg-client { background-color: #e0e7ff !important; color: #3730a3 !important; }
  .bg-project { background-color: #fef9c3 !important; color: #b45309 !important; }
  .bg-task { background-color: #fce7f3 !important; color: #be185d !important; }
  .bg-engineer { background-color: #d1fae5 !important; color: #065f46 !important; }
  .bg-admin { background-color: #f3e8ff !important; color: #7c3aed !important; }
  .bg-other { background-color: #f3f4f6 !important; color: #374151 !important; }
</style>

<script>
  let currentPage = 1;
  const limit = 12;
  let hasMoreData = true;
  let isLoading = false;
  
  function getTypeColor(type) {
    switch (type) {
      case 'primary': return 'bg-primary';
      case 'success': return 'bg-success';
      case 'warning': return 'bg-warning';
      case 'danger': return 'bg-danger';
      case 'info': return 'bg-info';
      case 'client': return 'bg-client';
      case 'project': return 'bg-project';
      case 'task': return 'bg-task';
      case 'engineer': return 'bg-engineer';
      case 'admin': return 'bg-admin';
      case 'other': return 'bg-other';
      default: return 'bg-secondary';
    }
  }
  
  function createActivityCard(activity) {
    let dateStr = '';
    if (activity.createdAt) {
      const d = new Date(activity.createdAt);
      dateStr = isNaN(d) ? 'Unknown' : d.toLocaleString();
    } else {
      dateStr = 'Unknown';
    }
    return `
      <div class="col-md-3 col-sm-6 mb-4 d-flex">
        <div class="card activity-card flex-fill">
          <div class="card-body d-flex align-items-center">
            <span class="activity-icon"><i class="fas fa-${activity.icon || 'info-circle'}"></i></span>
            <div class="flex-grow-1">
              <div class="d-flex justify-content-between align-items-center mb-1">
                <h5 class="card-title mb-0">${activity.title}</h5>
                <span class="badge ${getTypeColor(activity.type)} text-capitalize">${activity.type}</span>
              </div>
              <p class="mb-1">${activity.description}</p>
              <div class="activity-meta">
                <span><i class="fas fa-user me-1"></i>${activity.user?.name || 'System'}</span>
                <span class="ms-3"><i class="fas fa-clock me-1"></i>${dateStr}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
  }
  
  async function loadActivities(reset = false) {
    if (isLoading) return;
    isLoading = true;
  
    if (reset) {
      currentPage = 1;
      hasMoreData = true;
      document.getElementById('activityList').innerHTML = '';
    }
  
    const search = document.getElementById('searchInput')?.value || '';
    const params = new URLSearchParams({
      page: currentPage,
      limit: limit
    });
    if (search) params.append('search', search);
  
    const response = await fetch('/admin/api/activity-log?' + params.toString());
    const data = await response.json();
    const activityList = document.getElementById('activityList');
  
    if (!data.success || !data.data.length) {
      if (reset) {
        activityList.innerHTML = '<div class="text-center text-muted py-5">No activities found.</div>';
      }
      hasMoreData = false;
      document.getElementById('loadMoreContainer').style.display = 'none';
      isLoading = false;
      return;
    }
  
    // Append new activities
    activityList.innerHTML += data.data.map(createActivityCard).join('');
  
    // If less than limit, no more data
    hasMoreData = data.data.length === limit;
    document.getElementById('loadMoreContainer').style.display = hasMoreData ? 'block' : 'none';
  
    isLoading = false;
  }
  
  document.addEventListener('DOMContentLoaded', function() {
    loadActivities(true);
  
    document.getElementById('loadMoreBtn').addEventListener('click', async function() {
      if (!hasMoreData || isLoading) return;
      currentPage++;
      await loadActivities(false);
    });
  
    // Optional: Add search input debounce
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
      searchInput.addEventListener('input', function() {
        clearTimeout(window.searchTimeout);
        window.searchTimeout = setTimeout(() => loadActivities(true), 300);
      });
    }
  });
  </script>

<%- include('partials/loader') %>
<%- include('partials/toaster') %> 
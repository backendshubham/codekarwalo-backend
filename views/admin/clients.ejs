<%- contentFor('body') %>

  <div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Clients Management</h2>
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addClientModal">
      <i class="fas fa-plus me-2"></i>Add New Client
    </button>
    </div>

  <div class="card shadow-sm mb-4">
      <div class="card-body">
      <div class="row g-3">
        <div class="col-md-3">
          <select class="form-select" id="statusFilter">
            <option value="">All Status</option>
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
          </select>
        </div>
        <div class="col-md-3">
          <input type="text" class="form-control" id="searchInput" placeholder="Search name/email...">
        </div>
      </div>
    </div>
  </div>

  <div id="clientsList">
    <!-- Clients will be rendered here dynamically -->
  </div>
</div>

<!-- Add Client Modal -->
<div class="modal fade" id="addClientModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add New Client</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="addClientForm">
          <div class="mb-3">
            <label class="form-label">Name <span class="text-danger">*</span></label>
            <input type="text" class="form-control" name="name" required placeholder="Enter client name">
            <div class="invalid-feedback">Name is required.</div>
          </div>
          <div class="mb-3">
            <label class="form-label">Email <span class="text-danger">*</span></label>
            <input type="email" class="form-control" name="email" required placeholder="Enter client email">
            <div class="invalid-feedback">Valid email is required.</div>
          </div>
          <div class="mb-3">
            <label class="form-label">Phone</label>
            <input type="tel" class="form-control" name="phone" pattern="^[0-9+\-\s()]*$" placeholder="Enter phone (optional)">
            <div class="invalid-feedback">Please enter a valid phone number.</div>
          </div>
          <div class="mb-3">
            <label class="form-label">Status <span class="text-danger">*</span></label>
            <select class="form-select" name="status" required>
              <option value="active" selected>Active</option>
              <option value="inactive">Inactive</option>
            </select>
            <div class="invalid-feedback">Status is required.</div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveClientBtn">Add Client</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Client Modal -->
<div class="modal fade" id="editClientModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Client</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="editClientForm">
          <input type="hidden" name="_id" id="editClientId">
          <div class="mb-3">
            <label class="form-label">Name</label>
            <input type="text" class="form-control" name="name" id="editClientName" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Email</label>
            <input type="email" class="form-control" name="email" id="editClientEmail" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Phone</label>
            <input type="tel" class="form-control" name="phone" id="editClientPhone">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveEditClientBtn">Save Changes</button>
      </div>
    </div>
  </div>
</div>

<!-- Confirm Delete Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this client?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
      </div>
    </div>
  </div>
</div>

<!-- Confirm Status Change Modal -->
<div class="modal fade" id="confirmStatusModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Status Change</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <p id="statusChangeMsg">Are you sure you want to change the status?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirmStatusBtn">Yes, Change</button>
      </div>
    </div>
  </div>
</div>

<style>
  .client-card {
    transition: transform 0.2s;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.04);
  }
  .client-card:hover {
    transform: translateY(-5px) scale(1.01);
    box-shadow: 0 4px 16px rgba(37,99,235,0.08);
    border-color: #2563eb;
  }
  .card-actions {
    display: flex;
    gap: 0.5rem;
  }
  .btn-action {
    padding: 0.25rem 0.5rem;
    font-size: 0.95rem;
    border-radius: 6px;
  }
  .project-badge {
    font-size: 0.8rem;
    margin: 0.2rem;
  }
</style>

<script>
  let deleteClientId = null;
  let statusClientId = null;
  let statusAction = null;

  async function loadClients() {
    try {
      const status = document.getElementById('statusFilter').value;
      const search = document.getElementById('searchInput').value;

      const params = new URLSearchParams();
      if (status) params.append('status', status);
      if (search) params.append('search', search);

      const response = await fetch('/admin/api/clients?' + params.toString());
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
            
      const clientsList = document.getElementById('clientsList');
      if (!data.data || !data.data.length) {
        clientsList.innerHTML = '<div class="text-center text-muted py-5">No clients found.</div>';
        return;
      }

      clientsList.innerHTML = `
        <div class="row g-4">
          ${data.data.map(client => `
            <div class="col-md-6 col-lg-4">
              <div class="card client-card shadow-sm h-100">
                <div class="card-body">
                  <div class="d-flex justify-content-between align-items-start mb-3">
                    <h5 class="card-title mb-0">${client.name}</h5>
                    <span class="badge bg-${client.status === 'active' ? 'success' : 'secondary'}">${client.status}</span>
                  </div>
                  <p class="mb-1"><i class="fas fa-envelope me-2"></i>${client.email}</p>
                  ${client.phone ? `<p class="mb-1"><i class="fas fa-phone me-2"></i>${client.phone}</p>` : ''}
                </div>
                <div class="card-footer bg-transparent d-flex justify-content-between align-items-center">
                  <small class="text-muted">Joined: ${client.createdAt ? new Date(client.createdAt).toLocaleDateString() : ''}</small>
                  <div class="card-actions">
                    ${client.status === 'active' ? 
                      `<button class="btn btn-sm btn-outline-warning btn-action" onclick="confirmStatusChange('${client._id}', 'deactivate')" title="Set inactive"><i class="fas fa-user-slash"></i></button>` : 
                      `<button class="btn btn-sm btn-outline-success btn-action" onclick="confirmStatusChange('${client._id}', 'activate')" title="Set active"><i class="fas fa-user-check"></i></button>`
                    }
                    <button class="btn btn-sm btn-outline-primary btn-action" data-client='${JSON.stringify({ _id: client._id, name: client.name, email: client.email, phone: client.phone })}' onclick="handleEditBtnClick(this)" title="Edit"><i class="fas fa-edit"></i></button>
                    <button class="btn btn-sm btn-outline-danger btn-action" onclick="confirmDeleteClient('${client._id}')" title="Delete"><i class="fas fa-trash"></i></button>
                  </div>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      `;
    } catch (error) {
      console.error('Error loading clients:', error);
      toast.error('Failed to load clients');
    }
  }

  function confirmDeleteClient(id) {
    deleteClientId = id;
    const modal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
    modal.show();
  }

  document.getElementById('confirmDeleteBtn').addEventListener('click', async function() {
    if (!deleteClientId) return;
    try {
      const response = await fetch(`/admin/api/clients/${deleteClientId}`, { 
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      const data = await response.json();
      if (data.success) {
        toast.success('Client deleted successfully!');
        const modalEl = document.getElementById('confirmDeleteModal');
        let modal = bootstrap.Modal.getInstance(modalEl);
        if (!modal) modal = new bootstrap.Modal(modalEl);
        modal.hide();
        setTimeout(() => loadClients(), 1200);
      } else {
        toast.error(data.message || 'Failed to delete client');
      }
    } catch (error) {
      console.error('Error deleting client:', error);
      toast.error('Failed to delete client');
    }
  });

  function confirmStatusChange(id, action) {
    statusClientId = id;
    statusAction = action;
    document.getElementById('statusChangeMsg').textContent =
      action === 'activate' ? 'Are you sure you want to activate this client?' : 'Are you sure you want to deactivate this client?';
    const modal = new bootstrap.Modal(document.getElementById('confirmStatusModal'));
    modal.show();
  }

  document.getElementById('confirmStatusBtn').addEventListener('click', async function() {
    if (!statusClientId || !statusAction) return;
    try {
      const response = await fetch(`/admin/api/clients/${statusClientId}/${statusAction}`, { 
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      const data = await response.json();
      if (data.success) {
        toast.success('Client status updated!');
        const modalEl = document.getElementById('confirmStatusModal');
        let modal = bootstrap.Modal.getInstance(modalEl);
        if (!modal) modal = new bootstrap.Modal(modalEl);
        modal.hide();
        setTimeout(() => loadClients(), 1200);
      } else {
        toast.error(data.message || 'Failed to update status');
      }
    } catch (error) {
      console.error('Error updating status:', error);
      toast.error('Failed to update status');
    }
  });

  function handleEditBtnClick(btn) {
    const client = JSON.parse(btn.getAttribute('data-client'));
    openEditModal(client);
  }

  function openEditModal(client) {
    document.getElementById('editClientId').value = client._id;
    document.getElementById('editClientName').value = client.name || '';
    document.getElementById('editClientEmail').value = client.email || '';
    document.getElementById('editClientPhone').value = client.phone || '';
    const modal = new bootstrap.Modal(document.getElementById('editClientModal'));
    modal.show();
  }

  document.getElementById('saveEditClientBtn').addEventListener('click', async function() {
    const form = document.getElementById('editClientForm');
    const id = document.getElementById('editClientId').value;
    const formData = new FormData(form);
    const data = {};
    formData.forEach((value, key) => {
      data[key] = value;
    });
    try {
      const response = await fetch(`/admin/api/clients/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      const resp = await response.json();
      if (resp.success) {
        toast.success('Client updated successfully!');
        const modalEl = document.getElementById('editClientModal');
        let modal = bootstrap.Modal.getInstance(modalEl);
        if (!modal) modal = new bootstrap.Modal(modalEl);
        modal.hide();
        setTimeout(() => loadClients(), 1200);
      } else {
        toast.error(resp.message || 'Failed to update client');
      }
    } catch (error) {
      console.error('Error updating client:', error);
      toast.error('Failed to update client');
    }
  });

  // Add client-side validation for Add Client form
  const addClientForm = document.getElementById('addClientForm');
  const saveClientBtn = document.getElementById('saveClientBtn');

  saveClientBtn.addEventListener('click', async function() {
    // Reset validation
    addClientForm.classList.remove('was-validated');

    // Check validity
    if (!addClientForm.checkValidity()) {
      addClientForm.classList.add('was-validated');
      return;
    }

    const formData = new FormData(addClientForm);
    const data = {};
    formData.forEach((value, key) => {
      data[key] = value;
    });
    try {
      const response = await fetch('/admin/api/clients', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      const resp = await response.json();
      if (resp.success) {
        toast.success('Client added successfully!');
        const modal = bootstrap.Modal.getInstance(document.getElementById('addClientModal'));
        modal.hide();
        addClientForm.reset();
        setTimeout(() => loadClients(), 1200);
      } else {
        toast.error(resp.message || 'Failed to add client');
      }
    } catch (error) {
      console.error('Error adding client:', error);
      toast.error('Failed to add client');
    }
  });

  // Add event listeners for filters
  document.getElementById('statusFilter').addEventListener('change', loadClients);
  document.getElementById('searchInput').addEventListener('input', function() {
    clearTimeout(window.searchTimeout);
    window.searchTimeout = setTimeout(loadClients, 300);
  });

  // Call loadClients() on page load
  document.addEventListener('DOMContentLoaded', loadClients);
  </script>

<%- include('partials/toaster') %>

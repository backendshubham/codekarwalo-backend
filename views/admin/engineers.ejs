<%- contentFor('body') %>

  <div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Engineers Management</h2>
    </div>

  <div class="card shadow-sm mb-4">
      <div class="card-body">
      <div class="row g-3">
        <div class="col-md-2">
          <select class="form-select" id="statusFilter">
            <option value="">All Status</option>
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
            <option value="on_leave">On Leave</option>
          </select>
        </div>
        <div class="col-md-2">
          <select class="form-select" id="designationFilter">
            <option value="">All Designations</option>
            <option value="Student">Student</option>
            <option value="Employee">Employee</option>
            <option value="Freelancer">Freelancer</option>
          </select>
        </div>
        <div class="col-md-2">
          <select class="form-select" id="specializationFilter">
            <option value="">All Specializations</option>
            <option value="frontend">Frontend</option>
            <option value="backend">Backend</option>
            <option value="fullstack">Fullstack</option>
            <option value="mobile">Mobile</option>
            <option value="devOps">DevOps</option>
          </select>
        </div>
        <div class="col-md-2">
          <input type="number" class="form-control" id="minExperience" placeholder="Min Exp">
        </div>
        <div class="col-md-2">
          <input type="number" class="form-control" id="maxExperience" placeholder="Max Exp">
        </div>
        <div class="col-md-2">
          <input type="text" class="form-control" id="searchInput" placeholder="Search name/email...">
        </div>
      </div>
    </div>
  </div>

  <div id="engineersList">
    <!-- Engineers will be rendered here dynamically -->
  </div>
  <div id="loaderContainer" class="loader-container">
    <div class="loader"></div>
  </div>
  <div class="text-center mt-4" id="loadMoreContainer">
    <button class="btn btn-outline-primary" id="loadMoreBtn" style="display: none;">
      Load More
    </button>
  </div>
</div>

<!-- Edit Engineer Modal -->
<div class="modal fade" id="editEngineerModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Engineer</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="editEngineerForm">
          <input type="hidden" name="_id" id="editEngineerId">
          <div class="mb-2">
            <label class="form-label">Name</label>
            <input type="text" class="form-control" name="name" id="editEngineerName" required>
          </div>
          <div class="mb-2">
            <label class="form-label">Designation</label>
            <input type="text" class="form-control" name="designation" id="editEngineerDesignation">
          </div>
          <div class="mb-2">
            <label class="form-label">Experience (years)</label>
            <input type="number" class="form-control" name="experience" id="editEngineerExperience">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveEngineerBtn">Save Changes</button>
      </div>
    </div>
  </div>
</div>

<!-- Confirm Delete Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this engineer?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
      </div>
    </div>
  </div>
</div>

<!-- Confirm Status Change Modal -->
<div class="modal fade" id="confirmStatusModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Status Change</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <p id="statusChangeMsg">Are you sure you want to change the status?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirmStatusBtn">Yes, Change</button>
      </div>
    </div>
  </div>
</div>

<!-- Engineer Details Modal -->
<div class="modal fade" id="engineerDetailsModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Engineer Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="row">
          <div class="col-md-4 text-center mb-4">
            <div class="engineer-avatar mb-3">
              <i class="fas fa-user-circle fa-5x text-primary"></i>
            </div>
            <h4 id="detailEngineerName" class="mb-2"></h4>
            <span id="detailEngineerStatus" class="badge mb-3"></span>
          </div>
          <div class="col-md-8">
            <div class="card mb-3">
              <div class="card-body">
                <h6 class="card-subtitle mb-3 text-muted">Contact Information</h6>
                <div class="mb-3">
                  <label class="text-muted">Email</label>
                  <p id="detailEngineerEmail" class="mb-2"></p>
                </div>
                <div class="mb-3">
                  <label class="text-muted">Designation</label>
                  <p id="detailEngineerDesignation" class="mb-2"></p>
                </div>
                <div class="mb-3">
                  <label class="text-muted">Specialization</label>
                  <p id="detailEngineerSpecialization" class="mb-2"></p>
                </div>
                <div class="mb-3">
                  <label class="text-muted">Experience</label>
                  <p id="detailEngineerExperience" class="mb-2"></p>
                </div>
                <div class="mb-3">
                  <label class="text-muted">Skills</label>
                  <div id="detailEngineerSkills" class="d-flex flex-wrap gap-2"></div>
                </div>
                <div class="mb-3">
                  <label class="text-muted">Bio</label>
                  <p id="detailEngineerBio" class="mb-2"></p>
                </div>
              </div>
            </div>
            <div class="card">
              <div class="card-body">
                <h6 class="card-subtitle mb-3 text-muted">Projects Overview</h6>
                <div class="row text-center">
                  <div class="col-4">
                    <h3 id="detailTotalProjects" class="mb-1">0</h3>
                    <small class="text-muted">Total Projects</small>
                  </div>
                  <div class="col-4">
                    <h3 id="detailActiveProjects" class="mb-1">0</h3>
                    <small class="text-muted">Active Projects</small>
                  </div>
                  <div class="col-4">
                    <h3 id="detailCompletedProjects" class="mb-1">0</h3>
                    <small class="text-muted">Completed</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="editFromDetailsBtn">Edit Engineer</button>
      </div>
    </div>
  </div>
</div>

<style>
  .engineer-card {
    transition: transform 0.2s;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.04);
  }
  .engineer-card:hover {
    transform: translateY(-5px) scale(1.01);
    box-shadow: 0 4px 16px rgba(37,99,235,0.08);
    border-color: #2563eb;
  }
  .skill-badge {
    margin: 0.2rem;
  }
  .card-actions {
    display: flex;
    gap: 0.5rem;
  }
  .btn-action {
    padding: 0.25rem 0.5rem;
    font-size: 0.95rem;
    border-radius: 6px;
  }
  .loader-container {
    display: none;
    justify-content: center;
    align-items: center;
    min-height: 200px;
  }
  .loader {
    width: 48px;
    height: 48px;
    border: 5px solid #f3f3f3;
    border-top: 5px solid #2563eb;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>

<script>
  let deleteEngineerId = null;
  let statusEngineerId = null;
  let statusAction = null;
  let currentPage = 1;
  let hasMorePages = false;
  let selectedEngineer = null;

  function confirmDeleteEngineer(id) {
    deleteEngineerId = id;
    const modal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
    modal.show();
  }

  document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
    if (!deleteEngineerId) return;
    fetch(`/admin/api/engineers/${deleteEngineerId}`, { method: 'DELETE' })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          toast.success('Engineer deleted successfully!');
          setTimeout(() => location.reload(), 1200);
        } else {
          toast.error(data.message || 'Failed to delete engineer');
        }
      })
      .catch(() => toast.error('Failed to delete engineer'));
  });

  function confirmStatusChange(id, action) {
    statusEngineerId = id;
    statusAction = action;
    document.getElementById('statusChangeMsg').textContent =
      action === 'activate' ? 'Are you sure you want to activate this engineer?' : 'Are you sure you want to deactivate this engineer?';
    const modal = new bootstrap.Modal(document.getElementById('confirmStatusModal'));
    modal.show();
  }

  document.getElementById('confirmStatusBtn').addEventListener('click', function() {
    if (!statusEngineerId || !statusAction) return;
    fetch(`/admin/api/engineers/${statusEngineerId}/${statusAction}`, { method: 'POST' })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
    
          toast.success('Engineer status updated!');
          setTimeout(() => location.reload(), 1200);
        } else {
          toast.error(data.message || 'Failed to update status');
        }
      })
      .catch(() => toast.error('Failed to update status'));
  });

  function handleEditBtnClick(btn) {
    const engineer = JSON.parse(btn.getAttribute('data-engineer'));
    openEditModal(engineer);
  }

  function openEditModal(engineer) {
    document.getElementById('editEngineerId').value = engineer._id;
    document.getElementById('editEngineerName').value = engineer.name || '';
    document.getElementById('editEngineerDesignation').value = engineer.designation || '';
    document.getElementById('editEngineerExperience').value = engineer.experience || '';
    const modal = new bootstrap.Modal(document.getElementById('editEngineerModal'));
    modal.show();
  }

  document.getElementById('saveEngineerBtn').addEventListener('click', function() {
    const form = document.getElementById('editEngineerForm');
    const id = document.getElementById('editEngineerId').value;
    const formData = new FormData(form);
    const data = {};
    formData.forEach((value, key) => {
      data[key] = value;
    });
    fetch(`/admin/api/engineers/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    })
      .then(res => res.json())
      .then(resp => {

        if (resp.success) {
          toast.success('Engineer updated successfully!');
          setTimeout(() => location.reload(), 1200);
        } else {
          toast.error(resp.message || 'Failed to update engineer');
        }
      })
      .catch(() => toast.error('Failed to update engineer'));
  });

  async function loadEngineers(loadMore = false) {
    const engineersList = document.getElementById('engineersList');
    
    try {
      // Show loader
      showLoader();
      if (!loadMore) {
        engineersList.innerHTML = '';
        currentPage = 1;
      }

      const status = document.getElementById('statusFilter').value;
      const designation = document.getElementById('designationFilter').value;
      const specialization = document.getElementById('specializationFilter').value;
      const minExp = document.getElementById('minExperience').value;
      const maxExp = document.getElementById('maxExperience').value;
      const search = document.getElementById('searchInput').value;

      const params = new URLSearchParams();
      if (status) params.append('status', status);
      if (designation) params.append('designation', designation);
      if (specialization) params.append('specialization', specialization);
      if (minExp) params.append('minExperience', minExp);
      if (maxExp) params.append('maxExperience', maxExp);
      if (search) params.append('search', search);
      params.append('page', currentPage);
      params.append('limit', 12);

      const response = await fetch('/admin/api/engineers?' + params.toString());
      const data = await response.json();
            
      // Hide loader
      hideLoader();

      if (!data.data || !data.data.length) {
        if (!loadMore) {
          engineersList.innerHTML = '<div class="text-center text-muted py-5">No engineers found.</div>';
        }
        document.getElementById('loadMoreBtn').style.display = 'none';
        return;
      }

      const engineersHTML = data.data.map(engineer => `
        <div class="col-md-6 col-lg-4">
          <div class="card engineer-card shadow-sm h-100" style="cursor: pointer;" onclick="showEngineerDetails('${engineer._id}')">
            <div class="card-body">
              <div class="d-flex justify-content-between align-items-start mb-3">
                <h5 class="card-title mb-0">${engineer.name}</h5>
                <span class="badge bg-${engineer.status === 'active' ? 'success' : 'secondary'}">${engineer.status}</span>
              </div>
              <p class="mb-1"><i class="fas fa-envelope me-2"></i>${engineer.email}</p>
              ${engineer.designation ? `<p class="mb-1 text-muted"><i class="fas fa-briefcase me-2"></i>${engineer.designation}</p>` : ''}
              ${engineer.specialization ? `<p class="mb-1 text-muted"><i class="fas fa-code me-2"></i>${engineer.specialization}</p>` : ''}
              ${engineer.experience ? `<p class="mb-1 text-muted"><i class="fas fa-clock me-2"></i>${engineer.experience} years</p>` : ''}
              ${(engineer.skills && engineer.skills.length > 0) ? `
                <div class="mb-2">
                  <small class="text-muted d-block mb-1"><i class="fas fa-tools me-2"></i>Skills:</small>
                  ${engineer.skills.map(skill => `<span class="badge bg-info skill-badge">${skill}</span>`).join('')}
                </div>
              ` : ''}
              ${engineer.bio ? `<p class="card-text mt-2"><small class="text-muted"><i class="fas fa-info-circle me-2"></i>${engineer.bio}</small></p>` : ''}
            </div>
            <div class="card-footer bg-transparent d-flex justify-content-between align-items-center">
              <small class="text-muted">Joined: ${engineer.createdAt ? new Date(engineer.createdAt).toLocaleDateString() : ''}</small>
              <div class="card-actions">
                ${engineer.status === 'active' ? 
                  `<button class="btn btn-sm btn-outline-warning btn-action" onclick="event.stopPropagation(); confirmStatusChange('${engineer._id}', 'deactivate')" title="Set inactive"><i class="fas fa-user-slash"></i></button>` : 
                  `<button class="btn btn-sm btn-outline-success btn-action" onclick="event.stopPropagation(); confirmStatusChange('${engineer._id}', 'activate')" title="Set active"><i class="fas fa-user-check"></i></button>`
                }
                <button class="btn btn-sm btn-outline-primary btn-action" data-engineer='${JSON.stringify({ _id: engineer._id, name: engineer.name, designation: engineer.designation, experience: engineer.experience })}' onclick="event.stopPropagation(); handleEditBtnClick(this)" title="Edit"><i class="fas fa-edit"></i></button>
                <button class="btn btn-sm btn-outline-danger btn-action" onclick="event.stopPropagation(); confirmDeleteEngineer('${engineer._id}')" title="Delete"><i class="fas fa-trash"></i></button>
              </div>
            </div>
          </div>
        </div>
      `).join('');

      if (loadMore) {
        engineersList.innerHTML += engineersHTML;
      } else {
        engineersList.innerHTML = `<div class="row g-4">${engineersHTML}</div>`;
      }

      // Update load more button visibility
      hasMorePages = data.pagination.hasNextPage;
      document.getElementById('loadMoreBtn').style.display = hasMorePages ? 'inline-block' : 'none';

    } catch (error) {
      console.error('Error loading engineers:', error);
      toast.error('Failed to load engineers');
      hideLoader();
    }
  }

  // Add load more button click handler
  document.getElementById('loadMoreBtn').addEventListener('click', function() {
    if (hasMorePages) {
      currentPage++;
      loadEngineers(true);
    }
  });

  // Update existing event listeners to reset pagination
  document.getElementById('statusFilter').addEventListener('change', () => loadEngineers(false));
  document.getElementById('designationFilter').addEventListener('change', () => loadEngineers(false));
  document.getElementById('specializationFilter').addEventListener('change', () => loadEngineers(false));
  document.getElementById('minExperience').addEventListener('input', () => loadEngineers(false));
  document.getElementById('maxExperience').addEventListener('input', () => loadEngineers(false));
  document.getElementById('searchInput').addEventListener('input', function() {
    clearTimeout(window.searchTimeout);
    window.searchTimeout = setTimeout(() => loadEngineers(false), 300);
  });

  // Call loadEngineers() on page load
  document.addEventListener('DOMContentLoaded', () => loadEngineers(false));

  // Function to show engineer details modal
  async function showEngineerDetails(engineerId) {
    try {
      showLoader();
      const response = await fetch(`/admin/api/engineers/${engineerId}`);
      const data = await response.json();
      
      if (data.success) {
        const engineer = data.data;
        selectedEngineer = engineer;
        
        // Basic Info
        document.getElementById('detailEngineerName').textContent = engineer.name;
        document.getElementById('detailEngineerStatus').textContent = engineer.status;
        document.getElementById('detailEngineerStatus').className = `badge bg-${engineer.status === 'active' ? 'success' : 'secondary'}`;
        document.getElementById('detailEngineerEmail').textContent = engineer.email;
        document.getElementById('detailEngineerDesignation').textContent = engineer.designation || 'Not specified';
        document.getElementById('detailEngineerSpecialization').textContent = engineer.specialization || 'Not specified';
        document.getElementById('detailEngineerExperience').textContent = engineer.experience ? `${engineer.experience} years` : 'Not specified';
        document.getElementById('detailEngineerBio').textContent = engineer.bio || 'No bio provided';
        
        // Skills
        const skillsContainer = document.getElementById('detailEngineerSkills');
        skillsContainer.innerHTML = '';
        if (engineer.skills && engineer.skills.length > 0) {
          engineer.skills.forEach(skill => {
            const badge = document.createElement('span');
            badge.className = 'badge bg-info';
            badge.textContent = skill;
            skillsContainer.appendChild(badge);
          });
        } else {
          skillsContainer.innerHTML = '<span class="text-muted">No skills specified</span>';
        }

        // Fetch project statistics
        const statsResponse = await fetch(`/admin/api/engineers/${engineerId}/projects`);
        const statsData = await statsResponse.json();
        
        if (statsData.success) {
          document.getElementById('detailTotalProjects').textContent = statsData.total || 0;
          document.getElementById('detailActiveProjects').textContent = statsData.active || 0;
          document.getElementById('detailCompletedProjects').textContent = statsData.completed || 0;
        }

        const modal = new bootstrap.Modal(document.getElementById('engineerDetailsModal'));
        modal.show();
      } else {
        toast.error('Failed to load engineer details');
      }
    } catch (error) {
      console.error('Error loading engineer details:', error);
      toast.error('Failed to load engineer details');
    } finally {
      hideLoader();
    }
  }

  // Add click handler for edit from details button
  document.getElementById('editFromDetailsBtn').addEventListener('click', function() {
    if (selectedEngineer) {
      const modal = bootstrap.Modal.getInstance(document.getElementById('engineerDetailsModal'));
      modal.hide();
      openEditModal(selectedEngineer);
    }
  });
</script>
<%- include('partials/toaster') %>
<%- include('partials/loader') %>


<%- contentFor('body') %>

  <div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Engineers Management</h2>
    </div>

  <div class="card shadow-sm mb-4">
      <div class="card-body">
      <div class="row g-3">
        <div class="col-md-2">
          <select class="form-select" id="statusFilter">
            <option value="">All Status</option>
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
            <option value="on_leave">On Leave</option>
          </select>
        </div>
        <div class="col-md-2">
          <select class="form-select" id="designationFilter">
            <option value="">All Designations</option>
            <option value="Student">Student</option>
            <option value="Employee">Employee</option>
            <option value="Freelancer">Freelancer</option>
          </select>
        </div>
        <div class="col-md-2">
          <select class="form-select" id="specializationFilter">
            <option value="">All Specializations</option>
            <option value="frontend">Frontend</option>
            <option value="backend">Backend</option>
            <option value="fullstack">Fullstack</option>
            <option value="mobile">Mobile</option>
            <option value="devOps">DevOps</option>
          </select>
        </div>
        <div class="col-md-2">
          <input type="number" class="form-control" id="minExperience" placeholder="Min Exp">
        </div>
        <div class="col-md-2">
          <input type="number" class="form-control" id="maxExperience" placeholder="Max Exp">
        </div>
        <div class="col-md-2">
          <input type="text" class="form-control" id="searchInput" placeholder="Search name/email...">
        </div>
      </div>
    </div>
  </div>

  <div id="engineersList">
    <!-- Engineers will be rendered here dynamically -->
  </div>
</div>

<!-- Edit Engineer Modal -->
<div class="modal fade" id="editEngineerModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Engineer</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="editEngineerForm">
          <input type="hidden" name="_id" id="editEngineerId">
          <div class="mb-2">
            <label class="form-label">Name</label>
            <input type="text" class="form-control" name="name" id="editEngineerName" required>
          </div>
          <div class="mb-2">
            <label class="form-label">Designation</label>
            <input type="text" class="form-control" name="designation" id="editEngineerDesignation">
          </div>
          <div class="mb-2">
            <label class="form-label">Experience (years)</label>
            <input type="number" class="form-control" name="experience" id="editEngineerExperience">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveEngineerBtn">Save Changes</button>
      </div>
    </div>
  </div>
</div>

<!-- Confirm Delete Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this engineer?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
      </div>
    </div>
  </div>
</div>

<!-- Confirm Status Change Modal -->
<div class="modal fade" id="confirmStatusModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Status Change</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <p id="statusChangeMsg">Are you sure you want to change the status?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirmStatusBtn">Yes, Change</button>
      </div>
    </div>
  </div>
</div>

<style>
  .engineer-card {
    transition: transform 0.2s;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.04);
  }
  .engineer-card:hover {
    transform: translateY(-5px) scale(1.01);
    box-shadow: 0 4px 16px rgba(37,99,235,0.08);
    border-color: #2563eb;
  }
  .skill-badge {
    margin: 0.2rem;
  }
  .card-actions {
    display: flex;
    gap: 0.5rem;
  }
  .btn-action {
    padding: 0.25rem 0.5rem;
    font-size: 0.95rem;
    border-radius: 6px;
  }
</style>

<script>
  let deleteEngineerId = null;
  let statusEngineerId = null;
  let statusAction = null;

  function confirmDeleteEngineer(id) {
    deleteEngineerId = id;
    const modal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
    modal.show();
  }

  document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
    if (!deleteEngineerId) return;
    fetch(`/admin/api/engineers/${deleteEngineerId}`, { method: 'DELETE' })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          toast.success('Engineer deleted successfully!');
          setTimeout(() => location.reload(), 1200);
        } else {
          toast.error(data.message || 'Failed to delete engineer');
        }
      })
      .catch(() => toast.error('Failed to delete engineer'));
  });

  function confirmStatusChange(id, action) {
    statusEngineerId = id;
    statusAction = action;
    document.getElementById('statusChangeMsg').textContent =
      action === 'activate' ? 'Are you sure you want to activate this engineer?' : 'Are you sure you want to deactivate this engineer?';
    const modal = new bootstrap.Modal(document.getElementById('confirmStatusModal'));
    modal.show();
  }

  document.getElementById('confirmStatusBtn').addEventListener('click', function() {
    if (!statusEngineerId || !statusAction) return;
    fetch(`/admin/api/engineers/${statusEngineerId}/${statusAction}`, { method: 'POST' })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
    
          toast.success('Engineer status updated!');
          setTimeout(() => location.reload(), 1200);
        } else {
          toast.error(data.message || 'Failed to update status');
        }
      })
      .catch(() => toast.error('Failed to update status'));
  });

  function handleEditBtnClick(btn) {
    const engineer = JSON.parse(btn.getAttribute('data-engineer'));
    openEditModal(engineer);
  }

  function openEditModal(engineer) {
    document.getElementById('editEngineerId').value = engineer._id;
    document.getElementById('editEngineerName').value = engineer.name || '';
    document.getElementById('editEngineerDesignation').value = engineer.designation || '';
    document.getElementById('editEngineerExperience').value = engineer.experience || '';
    const modal = new bootstrap.Modal(document.getElementById('editEngineerModal'));
    modal.show();
  }

  document.getElementById('saveEngineerBtn').addEventListener('click', function() {
    const form = document.getElementById('editEngineerForm');
    const id = document.getElementById('editEngineerId').value;
    const formData = new FormData(form);
    const data = {};
    formData.forEach((value, key) => {
      data[key] = value;
    });
    fetch(`/admin/api/engineers/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    })
      .then(res => res.json())
      .then(resp => {

        if (resp.success) {
          toast.success('Engineer updated successfully!');
          setTimeout(() => location.reload(), 1200);
        } else {
          toast.error(resp.message || 'Failed to update engineer');
        }
      })
      .catch(() => toast.error('Failed to update engineer'));
  });

  async function loadEngineers() {
    try {
      const status = document.getElementById('statusFilter').value;
      const designation = document.getElementById('designationFilter').value;
      const specialization = document.getElementById('specializationFilter').value;
      const minExp = document.getElementById('minExperience').value;
      const maxExp = document.getElementById('maxExperience').value;
      const search = document.getElementById('searchInput').value;


      const params = new URLSearchParams();
      if (status) params.append('status', status);
      if (designation) params.append('designation', designation);
      if (specialization) params.append('specialization', specialization);
      if (minExp) params.append('minExperience', minExp);
      if (maxExp) params.append('maxExperience', maxExp);
      if (search) params.append('search', search);

      const response = await fetch('/admin/api/engineers?' + params.toString());
      const data = await response.json();
            
      const engineersList = document.getElementById('engineersList');
      if (!data.data || !data.data.length) {
        engineersList.innerHTML = '<div class="text-center text-muted py-5">No engineers found.</div>';
        return;
      }
      engineersList.innerHTML = `
        <div class="row g-4">
          ${data.data.map(engineer => `
            <div class="col-md-6 col-lg-4">
              <div class="card engineer-card shadow-sm h-100">
                <div class="card-body">
                  <div class="d-flex justify-content-between align-items-start mb-3">
                    <h5 class="card-title mb-0">${engineer.name}</h5>
                    <span class="badge bg-${engineer.status === 'active' ? 'success' : 'secondary'}">${engineer.status}</span>
                  </div>
                  <p class="mb-1"><i class="fas fa-envelope me-2"></i>${engineer.email}</p>
                  ${engineer.designation ? `<p class="mb-1 text-muted"><i class="fas fa-briefcase me-2"></i>${engineer.designation}</p>` : ''}
                  ${engineer.specialization ? `<p class="mb-1 text-muted"><i class="fas fa-code me-2"></i>${engineer.specialization}</p>` : ''}
                  ${engineer.experience ? `<p class="mb-1 text-muted"><i class="fas fa-clock me-2"></i>${engineer.experience} years</p>` : ''}
                  ${(engineer.skills && engineer.skills.length > 0) ? `
                    <div class="mb-2">
                      <small class="text-muted d-block mb-1"><i class="fas fa-tools me-2"></i>Skills:</small>
                      ${engineer.skills.map(skill => `<span class="badge bg-info skill-badge">${skill}</span>`).join('')}
                    </div>
                  ` : ''}
                  ${engineer.bio ? `<p class="card-text mt-2"><small class="text-muted"><i class="fas fa-info-circle me-2"></i>${engineer.bio}</small></p>` : ''}
                </div>
                <div class="card-footer bg-transparent d-flex justify-content-between align-items-center">
                  <small class="text-muted">Joined: ${engineer.createdAt ? new Date(engineer.createdAt).toLocaleDateString() : ''}</small>
                  <div class="card-actions">
                    ${engineer.status === 'active' ? 
                      `<button class="btn btn-sm btn-outline-warning btn-action" onclick="confirmStatusChange('${engineer._id}', 'deactivate')" title="Set inactive"><i class="fas fa-user-slash"></i></button>` : 
                      `<button class="btn btn-sm btn-outline-success btn-action" onclick="confirmStatusChange('${engineer._id}', 'activate')" title="Set active"><i class="fas fa-user-check"></i></button>`
                    }
                    <button class="btn btn-sm btn-outline-primary btn-action" data-engineer='${JSON.stringify({ _id: engineer._id, name: engineer.name, designation: engineer.designation, experience: engineer.experience })}' onclick="handleEditBtnClick(this)" title="Edit"><i class="fas fa-edit"></i></button>
                    <button class="btn btn-sm btn-outline-danger btn-action" onclick="confirmDeleteEngineer('${engineer._id}')" title="Delete"><i class="fas fa-trash"></i></button>
                  </div>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      `;
    } catch (error) {
      console.error('Error loading engineers:', error);
      toast.error('Failed to load engineers');
    }
  }

  // Add event listeners
  document.getElementById('statusFilter').addEventListener('change', loadEngineers);
  document.getElementById('designationFilter').addEventListener('change', loadEngineers);
  document.getElementById('specializationFilter').addEventListener('change', loadEngineers);
  document.getElementById('minExperience').addEventListener('input', loadEngineers);
  document.getElementById('maxExperience').addEventListener('input', loadEngineers);
  document.getElementById('searchInput').addEventListener('input', function() {
    clearTimeout(window.searchTimeout);
    window.searchTimeout = setTimeout(loadEngineers, 300);
  });

  // Call loadEngineers() on page load
  document.addEventListener('DOMContentLoaded', loadEngineers);
  </script>
<%- include('partials/toaster') %>


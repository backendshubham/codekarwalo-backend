<!-- Toaster Container -->
<div id="toast-container"></div>

<style>
#toast-container {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 999999;
}

.toast {
  min-width: 250px;
  padding: 15px;
  margin-bottom: 10px;
  border-radius: 4px;
  color: white;
  font-size: 14px;
  display: flex;
  align-items: center;
  gap: 10px;
  animation: slideIn 0.3s ease;
  box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.toast i {
  font-size: 18px;
}

.toast.success {
  background-color: #4CAF50;
}

.toast.error {
  background-color: #f44336;
}

@keyframes slideIn {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes fadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}
</style>

<script>
(function() {
  // Create the toast object
  const toast = {
    container: null,
    
    init() {
      console.log('Initializing toast...');
      this.container = document.getElementById('toast-container');
      if (!this.container) {
        console.error('Toast container not found, creating one...');
        this.container = document.createElement('div');
        this.container.id = 'toast-container';
        document.body.appendChild(this.container);
      }
      console.log('Toast initialized successfully');
    },
    
    show(message, type = 'success') {
      console.log('Showing toast:', { message, type });
      
      // Ensure container exists
      if (!this.container) {
        this.init();
      }
      
      // Create toast element
      const toastDiv = document.createElement('div');
      toastDiv.className = `toast ${type}`;
      
      // Add icon
      const icon = document.createElement('i');
      icon.className = `fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}`;
      toastDiv.appendChild(icon);
      
      // Add message
      const text = document.createElement('span');
      text.textContent = message;
      toastDiv.appendChild(text);
      
      // Add to container
      this.container.appendChild(toastDiv);
      console.log('Toast added to container');
      
      // Remove after delay
      setTimeout(() => {
        toastDiv.style.animation = 'fadeOut 0.3s ease forwards';
        setTimeout(() => {
          if (toastDiv.parentNode === this.container) {
            this.container.removeChild(toastDiv);
          }
        }, 300);
      }, 3000);
    },
    
    success(message) {
      console.log('Toast success:', message);
      this.show(message, 'success');
    },
    
    error(message) {
      console.log('Toast error:', message);
      this.show(message, 'error');
    }
  };

  // Initialize toast when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      toast.init();
      // Test toast
      setTimeout(() => {
        toast.success('Toast system initialized');
      }, 1000);
    });
  } else {
    toast.init();
    // Test toast
    setTimeout(() => {
      toast.success('Toast system initialized');
    }, 1000);
  }

  // Make toast globally available
  window.toast = toast;
  
  // Add a global error handler to catch any JavaScript errors
  window.onerror = function(msg, url, line) {
    console.error('JavaScript error:', msg, 'at', url, 'line', line);
    toast.error('An error occurred. Check console for details.');
    return false;
  };
})();
</script>

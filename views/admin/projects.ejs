<style>
  .project-card {
    transition: transform 0.2s;
  }
  .project-card:hover {
    transform: translateY(-5px);
  }
  .status-badge {
    position: absolute;
    top: 1rem;
    right: 1rem;
  }
  .skill-badge {
    margin: 0.2rem;
  }
  .card-actions {
    display: flex;
    gap: 0.5rem;
  }
  .card-title.ellipsis {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    display: block;
    width: 100%;
    max-width: 75%;
    cursor: pointer;
  }
  .status-filter {
    cursor: pointer;
    transition: all 0.2s;
  }
  .status-filter:hover {
    transform: translateY(-2px);
    opacity: 0.9;
  }
</style>

<div class="container-fluid py-4">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Projects Management</h2>
  </div>

  <!-- Project Filters -->
  <div class="card shadow-sm mb-4">
    <div class="card-body">
      <div class="row g-3">
        <div class="col-md-3">
          <select class="form-select" id="statusFilter">
            <option value="">ALL</option>
            <option value="in-progress">Active</option>
            <option value="completed">Completed</option>
            <option value="pending">Pending</option>
          </select>
        </div>
        <div class="col-md-3">
          <select class="form-select" id="categoryFilter">
            <option value="">All Categories</option>
            <option value="Software Development">Software Development</option>
            <option value="Web Development">Web Development</option>
            <option value="Graphic Design">Graphic Design</option>
            <option value="Data Science">Data Science</option>
            <option value="UI/UX Design">UI/UX Design</option>
            <option value="Embedded Systems">Embedded Systems</option>
            <option value="Other">Other</option>
          </select>
        </div>
        <div class="col-md-3">
          <select class="form-select" id="complexityFilter">
            <option value="">All Complexity</option>
            <option value="Low">Low</option>
            <option value="Medium">Medium</option>
            <option value="High">High</option>
          </select>
        </div>
        <div class="col-md-3">
          <input type="text" class="form-control" id="searchInput" placeholder="Search projects...">
        </div>
      </div>
    </div>
  </div>

  <!-- Projects List -->
  <div class="row g-4" id="projectsList">
    <!-- Projects will be loaded here dynamically -->
  </div>
</div>

<!-- Edit Project Modal -->
<div class="modal fade" id="editProjectModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Project</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="editProjectForm">
          <input type="hidden" name="id" id="editProjectId">
          <div class="mb-2">
            <label class="form-label">Project Name</label>
            <input type="text" class="form-control" name="title" id="editProjectTitle" required>
          </div>
          <div class="mb-2">
            <label class="form-label">Price</label>
            <input type="number" class="form-control" name="paymentAmount" id="editProjectPayment" required>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveProjectBtn">Save Changes</button>
      </div>
    </div>
  </div>
</div>

<!-- Confirm Delete Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this project?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
      </div>
    </div>
  </div>
</div>

<!-- Confirm Status Change Modal -->
<div class="modal fade" id="confirmStatusModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Status Change</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <p id="statusChangeMsg">Are you sure you want to change the status?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirmStatusBtn">Yes, Change</button>
      </div>
    </div>
  </div>
</div>

<!-- Assign Engineers Modal -->
<div class="modal fade" id="assignEngineersModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Assign Engineers to Project</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <input type="hidden" id="assignProjectId">
        <div class="mb-3">
          <label for="engineersSelect" class="form-label">Select Engineers</label>
          <select id="engineersSelect" class="form-select" multiple size="8">
            <!-- Engineers will be populated here -->
          </select>
          <div class="form-text">Hold Ctrl/Cmd to select multiple engineers</div>
        </div>
        <div class="selected-engineers mb-3">
          <label class="form-label">Selected Engineers</label>
          <div id="selectedEngineersList" class="d-flex flex-wrap gap-2">
            <!-- Selected engineers will be shown here -->
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveAssignEngineersBtn">Assign Engineers</button>
      </div>
    </div>
  </div>
</div>

<script src="/js/bootstrap.bundle.min.js"></script>
<script>
  let deleteProjectId = null;
  let statusProjectId = null;
  let statusAction = null;

  // Helper functions
  function getStatusColor(status) {
    switch (status) {
      case 'completed': return 'success';
      case 'in-progress': return 'primary';
      case 'pending': return 'warning';
      default: return 'secondary';
    }
  }

  function getComplexityColor(complexity) {
    switch (complexity) {
      case 'High': return 'danger';
      case 'Medium': return 'warning';
      case 'Low': return 'success';
      default: return 'secondary';
    }
  }

  // Load projects with filters
  async function loadProjects() {
    try {
      const status = document.getElementById('statusFilter').value;
      const category = document.getElementById('categoryFilter').value;
      const complexity = document.getElementById('complexityFilter').value;
      const search = document.getElementById('searchInput').value;

      const params = new URLSearchParams();
      if (status) params.append('status', status);
      if (category) params.append('category', category);
      if (complexity) params.append('complexity', complexity);
      if (search) params.append('search', search);

      const response = await fetch('/admin/api/projects?' + params.toString());
      const data = await response.json();
      if (data.success) {
        const projectsList = document.getElementById('projectsList');
        if (!data.data.length) {
          projectsList.innerHTML = '<div class="col-12 text-center text-muted py-5">No projects found.</div>';
          return;
        }
        projectsList.innerHTML = data.data.map(project => `
          <div class="col-md-6 col-lg-4">
            <div class="card project-card shadow-sm h-100 position-relative">
              <div class="card-body">
                <span class="badge bg-${getStatusColor(project.status)} status-badge text-capitalize">${project.status.replace('_', ' ')}</span>
                <h5 class="card-title ellipsis" title="${project.title}">${project.title}</h5>
                <p class="text-muted mb-2">Client: ${project.client?.name || 'Unknown'}</p>
                <p class="card-text">${project.description}</p>
                <div class="mb-3">
                  ${(project.requiredSkills || []).map(skill => `
                    <span class="badge bg-info skill-badge">${skill}</span>
                  `).join('')}
                </div>
                <div class="d-flex justify-content-between align-items-center">
                  <div>
                    <span class="badge bg-${getComplexityColor(project.complexity)}">${project.complexity}</span>
                    <small class="text-muted d-block">${project.category}</small>
                  </div>
                  <div class="text-end">
                    <div class="fw-bold">$${(project.paymentAmount || 0).toLocaleString()}</div>
                    <small class="text-muted">${project.paymentMethod}</small>
                  </div>
                </div>
              </div>
              <div class="card-footer bg-transparent d-flex justify-content-between align-items-center card-actions">
                <small class="text-muted">Due: ${project.deadline ? new Date(project.deadline).toLocaleDateString() : 'N/A'}</small>
                <div>
                  <button class="btn btn-sm btn-info btn-assign-engineers" data-project-id="${project._id}" title="Assign Engineers"><i class="fas fa-users"></i></button>
                  <button class="btn btn-sm btn-outline-primary btn-edit-project" data-project='${JSON.stringify({ _id: project._id, title: project.title, paymentAmount: project.paymentAmount })}' title="Edit"><i class="fas fa-edit"></i></button>
                  <button class="btn btn-sm btn-outline-warning btn-status-project" data-id="${project._id}" data-status="in-progress" title="Set In Progress"><i class="fas fa-play"></i></button>
                  <button class="btn btn-sm btn-outline-success btn-status-project" data-id="${project._id}" data-status="completed" title="Set Completed"><i class="fas fa-check"></i></button>
                  <button class="btn btn-sm btn-outline-danger btn-delete-project" data-id="${project._id}" title="Delete"><i class="fas fa-trash"></i></button>
                </div>
              </div>
            </div>
          </div>
        `).join('');
      }
    } catch (error) {
      console.error('Error loading projects:', error);
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Add click handlers for status filter badges
    document.querySelectorAll('.status-filter').forEach(badge => {
      badge.addEventListener('click', function() {
        const status = this.getAttribute('data-status');
        document.getElementById('statusFilter').value = status;
        loadProjects();
      });
    });

    loadProjects();
    // Add event listeners for filters
    document.getElementById('statusFilter').addEventListener('change', loadProjects);
    document.getElementById('categoryFilter').addEventListener('change', loadProjects);
    document.getElementById('complexityFilter').addEventListener('change', loadProjects);
    document.getElementById('searchInput').addEventListener('input', function() {
      clearTimeout(window.searchTimeout);
      window.searchTimeout = setTimeout(loadProjects, 300);
    });
    // Delegate all project actions
    document.getElementById('projectsList').addEventListener('click', function(e) {
      // Edit
      if (e.target.closest('.btn-edit-project')) {
        const btn = e.target.closest('.btn-edit-project');
        const project = JSON.parse(btn.getAttribute('data-project'));
        document.getElementById('editProjectId').value = project._id;
        document.getElementById('editProjectTitle').value = project.title;
        document.getElementById('editProjectPayment').value = project.paymentAmount;
        new bootstrap.Modal(document.getElementById('editProjectModal')).show();
      }
      // Status change
      if (e.target.closest('.btn-status-project')) {
        const btn = e.target.closest('.btn-status-project');
        statusProjectId = btn.getAttribute('data-id');
        statusAction = btn.getAttribute('data-status');
        document.getElementById('statusChangeMsg').textContent = `Are you sure you want to change the status to "${statusAction.replace('_', ' ')}"?`;
        new bootstrap.Modal(document.getElementById('confirmStatusModal')).show();
      }
      // Delete
      if (e.target.closest('.btn-delete-project')) {
        deleteProjectId = e.target.closest('.btn-delete-project').getAttribute('data-id');
        new bootstrap.Modal(document.getElementById('confirmDeleteModal')).show();
      }
      // Assign Engineers
      if (e.target.closest('.btn-assign-engineers')) {
        const btn = e.target.closest('.btn-assign-engineers');
        const projectId = btn.getAttribute('data-project-id');
        document.getElementById('assignProjectId').value = projectId;

        // Fetch all engineers and populate the select
        fetch('/admin/api/engineers')
          .then(res => res.json())
          .then(data => {
            const select = document.getElementById('engineersSelect');
            select.innerHTML = '';
            (data.data || []).forEach(engineer => {
              const option = document.createElement('option');
              option.value = engineer._id;
              option.textContent = `${engineer.name} (${engineer.email})`;
              select.appendChild(option);
            });

            // Fetch assigned engineers for this project and pre-select them
            fetch(`/admin/api/projects/${projectId}`)
              .then(res => res.json())
              .then(data => {
                const assigned = (data.data.assignedEngineers || []).map(e => e._id);
                Array.from(select.options).forEach(opt => {
                  if (assigned.includes(opt.value)) opt.selected = true;
                });
                updateSelectedEngineersList();
              });
          });

        new bootstrap.Modal(document.getElementById('assignEngineersModal')).show();
      }
    });

    // Save changes from edit modal
    document.getElementById('saveProjectBtn').addEventListener('click', function() {
      const id = document.getElementById('editProjectId').value;
      const title = document.getElementById('editProjectTitle').value;
      const paymentAmount = document.getElementById('editProjectPayment').value;
      fetch(`/admin/api/projects/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, paymentAmount })
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          bootstrap.Modal.getInstance(document.getElementById('editProjectModal')).hide();
          toast.success('Project updated successfully!');
          setTimeout(() => loadProjects(), 1200);
        } else {
          toast.error(data.message || 'Failed to update project');
        }
      });
    });

    // Confirm status change
    document.getElementById('confirmStatusBtn').addEventListener('click', function() {
      if (!statusProjectId || !statusAction) return;
      fetch(`/admin/api/projects/${statusProjectId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: statusAction })
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          bootstrap.Modal.getInstance(document.getElementById('confirmStatusModal')).hide();
          toast.success('Status updated!');
          setTimeout(() => loadProjects(), 1200);
        } else {
          toast.error(data.message || 'Failed to update status');
        }
      });
    });

    // Confirm delete
    document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
      if (!deleteProjectId) return;
      fetch(`/admin/as/${deleteProjectId}`, { method: 'DELETE' })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            bootstrap.Modal.getInstance(document.getElementById('confirmDeleteModal')).hide();
            toast.success('Project deleted successfully!');
            setTimeout(() => loadProjects(), 1200);
          } else {
            toast.error(data.message || 'Failed to delete project');
          }
        });
    });

    // Add event listener for engineers select change
    document.getElementById('engineersSelect').addEventListener('change', updateSelectedEngineersList);

    // Function to update the selected engineers list
    function updateSelectedEngineersList() {
      const select = document.getElementById('engineersSelect');
      const list = document.getElementById('selectedEngineersList');
      list.innerHTML = '';
      
      Array.from(select.selectedOptions).forEach(option => {
        const badge = document.createElement('span');
        badge.className = 'badge bg-primary';
        badge.textContent = option.textContent;
        list.appendChild(badge);
      });
    }

    // Save assigned engineers
    document.getElementById('saveAssignEngineersBtn').addEventListener('click', function() {
      const projectId = document.getElementById('assignProjectId').value;
      const select = document.getElementById('engineersSelect');
      const selectedEngineers = Array.from(select.selectedOptions).map(opt => opt.value);

      fetch(`/admin/api/projects/${projectId}/assign-engineers`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ engineers: selectedEngineers })
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          bootstrap.Modal.getInstance(document.getElementById('assignEngineersModal')).hide();
          toast.success('Engineers assigned successfully!');
          setTimeout(() => loadProjects(), 1200);
        } else {
          toast.error(data.message || 'Failed to assign engineers');
        }
      })
      .catch(error => {
        console.error('Error assigning engineers:', error);
        toast.error('Failed to assign engineers. Please try again.');
      });
    });
  });
</script>
<%- include('partials/toaster') %>

<style>
  .project-card {
    transition: transform 0.2s;
  }
  .project-card:hover {
    transform: translateY(-5px);
  }
  .status-badge {
    position: absolute;
    top: 1rem;
    right: 1rem;
  }
  .skill-badge {
    margin: 0.2rem;
  }
  .card-actions {
    display: flex;
    gap: 0.5rem;
  }
  .card-title.ellipsis {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    display: block;
    width: 100%;
    max-width: 75%;
  }
  .progress {
    height: 0.5rem;
  }
</style>

<div class="container-fluid py-4">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h2>My Projects</h2>
  </div>

  <!-- Project Filters -->
  <div class="card shadow-sm mb-4">
    <div class="card-body">
      <div class="row g-3">
        <div class="col-md-3">
          <select class="form-select" id="statusFilter">
            <option value="">ALL</option>
            <option value="in-progress">Active</option>
            <option value="completed">Completed</option>
            <option value="pending">Pending</option>
          </select>
        </div>
        <div class="col-md-3">
          <select class="form-select" id="categoryFilter">
            <option value="">All Categories</option>
            <option value="Software Development">Software Development</option>
            <option value="Web Development">Web Development</option>
            <option value="Graphic Design">Graphic Design</option>
            <option value="Data Science">Data Science</option>
            <option value="UI/UX Design">UI/UX Design</option>
            <option value="Embedded Systems">Embedded Systems</option>
            <option value="Other">Other</option>
          </select>
        </div>
        <div class="col-md-3">
          <select class="form-select" id="complexityFilter">
            <option value="">All Complexity</option>
            <option value="Low">Low</option>
            <option value="Medium">Medium</option>
            <option value="High">High</option>
          </select>
        </div>
        <div class="col-md-3">
          <input type="text" class="form-control" id="searchInput" placeholder="Search projects...">
        </div>
      </div>
    </div>
  </div>

  <!-- Projects List -->
  <div class="row g-4" id="projectsList">
    <!-- Projects will be loaded here dynamically -->
  </div>
</div>

<!-- Update Progress Modal -->
<div class="modal fade" id="updateProgressModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Update Project Progress</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="updateProgressForm">
          <input type="hidden" id="updateProjectId">
          <div class="mb-3">
            <label class="form-label">Progress</label>
            <input type="range" class="form-range" id="progressInput" min="0" max="100" step="5">
            <div class="d-flex justify-content-between">
              <small>0%</small>
              <small id="progressValue">50%</small>
              <small>100%</small>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label">Status Update</label>
            <textarea class="form-control" id="statusUpdate" rows="3" placeholder="Add a status update..."></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveProgressBtn">Update Progress</button>
      </div>
    </div>
  </div>
</div>

<script src="/js/bootstrap.bundle.min.js"></script>
<script>
  // Get current engineer ID from the page
  const currentEngineerId = '<%= user._id %>';  // Assuming you pass the user object to the template

  // Helper functions
  function getStatusColor(status) {
    switch (status) {
      case 'completed': return 'success';
      case 'in-progress': return 'primary';
      case 'pending': return 'warning';
      default: return 'secondary';
    }
  }

  function getComplexityColor(complexity) {
    switch (complexity) {
      case 'High': return 'danger';
      case 'Medium': return 'warning';
      case 'Low': return 'success';
      default: return 'secondary';
    }
  }

  // Load projects with filters
  async function loadProjects() {
    try {
      const status = document.getElementById('statusFilter').value;
      const category = document.getElementById('categoryFilter').value;
      const complexity = document.getElementById('complexityFilter').value;
      const search = document.getElementById('searchInput').value;

      const params = new URLSearchParams();
      if (status) params.append('status', status);
      if (category) params.append('category', category);
      if (complexity) params.append('complexity', complexity);
      if (search) params.append('search', search);

      const response = await fetch('/engineer/api/projects?' + params.toString());
      const data = await response.json();
      if (data.success) {
        const projectsList = document.getElementById('projectsList');
        if (!data.data.length) {
          projectsList.innerHTML = '<div class="col-12 text-center text-muted py-5">No projects found.</div>';
          return;
        }
        projectsList.innerHTML = data.data.map(project => `
          <div class="col-md-6 col-lg-4">
            <div class="card project-card shadow-sm h-100 position-relative">
              <div class="card-body">
                <span class="badge bg-${getStatusColor(project.status)} status-badge text-capitalize">${project.status.replace('_', ' ')}</span>
                <h5 class="card-title ellipsis" title="${project.title}">${project.title}</h5>
                <p class="text-muted mb-2">Client: ${project.client?.name || 'Unknown'}</p>
                <p class="card-text">${project.description}</p>
                <div class="mb-3">
                  ${(project.requiredSkills || []).map(skill => `
                    <span class="badge bg-info skill-badge">${skill}</span>
                  `).join('')}
                </div>
                <div class="mb-3">
                  <label class="form-label">Assigned Engineers</label>
                  <div class="d-flex flex-wrap gap-2">
                    ${(project.assignedEngineers || []).map(engineer => `
                      <span class="badge bg-secondary">
                        <i class="fas fa-user me-1"></i>${engineer.name}
                        ${engineer._id === currentEngineerId ? ' (You)' : ''}
                      </span>
                    `).join('')}
                    ${(!project.assignedEngineers || project.assignedEngineers.length === 0) ? 
                      '<span class="text-muted small">No engineers assigned</span>' : ''}
                  </div>
                </div>
                <div class="mb-3">
                  <label class="form-label">Progress</label>
                  <div class="progress">
                    <div class="progress-bar bg-${getStatusColor(project.status)}" role="progressbar" 
                         style="width: ${project.progress || 0}%" 
                         aria-valuenow="${project.progress || 0}" 
                         aria-valuemin="0" 
                         aria-valuemax="100">
                    </div>
                  </div>
                  <small class="text-muted">${project.progress || 0}% Complete</small>
                </div>
                <div class="d-flex justify-content-between align-items-center">
                  <div>
                    <span class="badge bg-${getComplexityColor(project.complexity)}">${project.complexity}</span>
                    <small class="text-muted d-block">${project.category}</small>
                  </div>
                  <div class="text-end">
                    <div class="fw-bold">$${(project.paymentAmount || 0).toLocaleString()}</div>
                    <small class="text-muted">${project.paymentMethod}</small>
                  </div>
                </div>
              </div>
              <div class="card-footer bg-transparent d-flex justify-content-between align-items-center card-actions">
                <small class="text-muted">Due: ${project.deadline ? new Date(project.deadline).toLocaleDateString() : 'N/A'}</small>
                <div>
                  <button class="btn btn-sm btn-primary btn-update-progress" 
                          data-project='${JSON.stringify({ 
                            _id: project._id, 
                            progress: project.progress || 0,
                            status: project.status
                          })}' 
                          title="Update Progress">
                    <i class="fas fa-tasks"></i>
                  </button>
                </div>
              </div>
            </div>
          </div>
        `).join('');
      }
    } catch (error) {
      console.error('Error loading projects:', error);
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    loadProjects();
    
    // Add event listeners for filters
    document.getElementById('statusFilter').addEventListener('change', loadProjects);
    document.getElementById('categoryFilter').addEventListener('change', loadProjects);
    document.getElementById('complexityFilter').addEventListener('change', loadProjects);
    document.getElementById('searchInput').addEventListener('input', function() {
      clearTimeout(window.searchTimeout);
      window.searchTimeout = setTimeout(loadProjects, 300);
    });

    // Progress input handler
    document.getElementById('progressInput').addEventListener('input', function() {
      document.getElementById('progressValue').textContent = this.value + '%';
    });

    // Update progress button handler
    document.getElementById('saveProgressBtn').addEventListener('click', function() {
      const projectId = document.getElementById('updateProjectId').value;
      const progress = document.getElementById('progressInput').value;
      const statusUpdate = document.getElementById('statusUpdate').value;

      fetch(`/engineer/api/projects/${projectId}/progress`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ progress, statusUpdate })
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          bootstrap.Modal.getInstance(document.getElementById('updateProgressModal')).hide();
          toast.success('Progress updated successfully!');
          setTimeout(() => loadProjects(), 1200);
        } else {
          toast.error(data.message || 'Failed to update progress');
        }
      })
      .catch(error => {
        console.error('Error updating progress:', error);
        toast.error('Failed to update progress. Please try again.');
      });
    });

    // Delegate project actions
    document.getElementById('projectsList').addEventListener('click', function(e) {
      if (e.target.closest('.btn-update-progress')) {
        const btn = e.target.closest('.btn-update-progress');
        const project = JSON.parse(btn.getAttribute('data-project'));
        document.getElementById('updateProjectId').value = project._id;
        document.getElementById('progressInput').value = project.progress;
        document.getElementById('progressValue').textContent = project.progress + '%';
        document.getElementById('statusUpdate').value = '';
        new bootstrap.Modal(document.getElementById('updateProgressModal')).show();
      }
    });
  });
</script>
<%- include('partials/toaster') %> 